name: build
on:
  push:
    branches:
      - main
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        env:
          SLACK_MESSAGE: "Fail report by Linzey"
          SLACK_TITLE: "Fail report"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          output: 'fail_report.txt'
          exit-code: '1'
          severity: 'HIGH'

      # - name: Slack Notification
      #   if: failure()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ID }}
      #     SLACK_COLOR: ${{ job.status }}
      #     SLACK_MESSAGE: "Failed trivy scan, see uploaded report"
      #     SLACK_TITLE: 'Scan failed - lzy'
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

      # - name: Fail Report
      #   if: failure()
      #   uses: MeilCli/slack-upload-file@v4
      #   with:
      #     slack_token: ${{ secrets.SLACK_TOKEN }}
      #     channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
      #     content: 'file content'
      #     file_type: 'text'
      #     file_name: 'fail_report.txt'
      #     file_path: 'fail_report.txt'
      #     title: 'title of file'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
          scan-type: 'fs'
          scan-ref: '.'
          vuln-type: 'os,library'
          severity: 'CRITICAL'

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.5.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: docker_meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ghcr.io/sigstore/sample-honk
          tags: type=sha,format=long

       name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: linzey/cicdws:{{ github.sha }}


      - name: Build and Push container images
        uses: docker/build-push-action@v4.0.0
        id: build-and-push
        with:
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: linzey/cicdws:{{ github.sha }}


      - name: Sign image with a key
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}

      - name: Sign the images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.docker_meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}
